import pandas as pd
import api
from logger import Logger
import numpy as np

logger = Logger().get_logger()


def get_embedding(text, model="text-embedding-ada-002"):
    '''Embeddings are generated by training models on massive text corpora. 
    These models, such as Word2Vec, GloVe, or BERT, learn by observing how words are used in sentences. 
    Through training, the model learns to associate words with their contexts. 
    This means that words appearing in similar contexts are positioned closer together in the embedding space.
    '''
    text = text.replace("\n", " ")
    return api.create_embedding(
        input = [text], 
        model=model
    ).data[0].embedding


def cosine_similarity(a, b):
    '''In the high-dimensional vector space, each word is represented as a vector. 
    The distance between these points is a measure of semantic similarity. 
    Techniques like cosine similarity are used to measure how close or far apart these vectors are.
    '''
    numerator = np.dot(a, b)
    denominator = np.linalg.norm(a) * np.linalg.norm(b)
    return numerator / denominator


# Generate the embeddings for the word.csv
#df = pd.read_csv('embedding/words.csv')
# set the embedding for each word in the dataframe
#df['embedding'] = df['text'].apply(
#    lambda x: get_embedding(x)
#)
#df.to_csv('embeddings.csv')

df = pd.read_csv('embedding/embeddings.csv')
df['embedding'] = df['embedding'].apply(
    eval # applying eval to each element will convert the string representation of lists or arrays into actual Python list objects.
).apply(
    np.array # after converting the string representations to lists, this second apply call converts these lists into numpy arrays
)


# user search term
user_search_embedding = input('Enter a search term: ')
logger.info(f"Search term: {user_search_embedding}")

# embeddings for the user search term
user_search_embedding = get_embedding(user_search_embedding)


# Using cosine similarity to find the word most similar to the user search term
df['similarity'] = df['embedding'].apply(
    lambda x: cosine_similarity(
        x, 
        user_search_embedding
    )
)

# sort the dataframe by the similarity axis
df = df.sort_values(
    by='similarity', 
    ascending=False
)

logger.info(df.head(10))
